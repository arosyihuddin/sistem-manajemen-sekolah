import { Router } from 'express';
import { Request, Response, NextFunction } from 'express';

// Placeholder para AuthController
class AuthController {
  login = async (req: Request, res: Response, _next: NextFunction) => {
    return res.json({ message: 'Login endpoint' });
  };

  register = async (req: Request, res: Response, _next: NextFunction) => {
    return res.json({ message: 'Register endpoint' });
  };

  getMe = async (req: Request, res: Response, _next: NextFunction) => {
    return res.json({ message: 'Get me endpoint' });
  };

  changePassword = async (req: Request, res: Response, _next: NextFunction) => {
    return res.json({ message: 'Change password endpoint' });
  };

  logout = async (req: Request, res: Response, _next: NextFunction) => {
    return res.json({ message: 'Logout endpoint' });
  };
}

const router = Router();
const authController = new AuthController();

// Rutas pÃºblicas
router.post('/login', (req: Request, res: Response, next: NextFunction) => authController.login(req, res, next));
router.post('/register', (req: Request, res: Response, next: NextFunction) => authController.register(req, res, next));

// Rutas protegidas
// Temporarily disabled authenticate middleware
// router.use(authenticate);
router.get('/me', (req: Request, res: Response, next: NextFunction) => authController.getMe(req, res, next));
router.post('/change-password', (req: Request, res: Response, next: NextFunction) => authController.changePassword(req, res, next));
router.post('/logout', (req: Request, res: Response, next: NextFunction) => authController.logout(req, res, next));

export default router;