[
  {
    "desc": "Convert an address into geographic coordinates",
    "kind": "basic",
    "name": "maps_geocode",
    "origin_name": "maps_geocode",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Convert coordinates into an address",
    "kind": "basic",
    "name": "maps_reverse_geocode",
    "origin_name": "maps_reverse_geocode",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Search for places using Google Places API",
    "kind": "basic",
    "name": "maps_search_places",
    "origin_name": "maps_search_places",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Get detailed information about a specific place",
    "kind": "basic",
    "name": "maps_place_details",
    "origin_name": "maps_place_details",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Calculate travel distance and time for multiple origins and destinations",
    "kind": "basic",
    "name": "maps_distance_matrix",
    "origin_name": "maps_distance_matrix",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Get elevation data for locations on the earth",
    "kind": "basic",
    "name": "maps_elevation",
    "origin_name": "maps_elevation",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Get directions between two points",
    "kind": "basic",
    "name": "maps_directions",
    "origin_name": "maps_directions",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Convert text to audio with a given voice and save the output audio file to a given directory.\n    Directory is optional, if not provided, the output file will be saved to $HOME/Desktop.\n    Voice id is optional, if not provided, the default voice will be used.\n\n    COST WARNING: This tool makes an API call to Minimax which may incur costs. Only use when explicitly requested by the user.\n\n    Args:\n        text (str): The text to convert to speech.\n        voice_id (str, optional): The id of the voice to use. For example, \"male-qn-qingse\"/\"audiobook_female_1\"/\"cute_boy\"/\"Charming_Lady\"...\n        model (string, optional): The model to use.\n        speed (float, optional): Speed of the generated audio. Controls the speed of the generated speech. Values range from 0.5 to 2.0, with 1.0 being the default speed. \n        vol (float, optional): Volume of the generated audio. Controls the volume of the generated speech. Values range from 0 to 10, with 1 being the default volume.\n        pitch (int, optional): Pitch of the generated audio. Controls the speed of the generated speech. Values range from -12 to 12, with 0 being the default speed.\n        emotion (str, optional): Emotion of the generated audio. Controls the emotion of the generated speech. Values range [\"happy\", \"sad\", \"angry\", \"fearful\", \"disgusted\", \"surprised\", \"neutral\"], with \"happy\" being the default emotion.\n        sample_rate (int, optional): Sample rate of the generated audio. Controls the sample rate of the generated speech. Values range [8000,16000,22050,24000,32000,44100] with 32000 being the default sample rate.\n        bitrate (int, optional): Bitrate of the generated audio. Controls the bitrate of the generated speech. Values range [32000,64000,128000,256000] with 128000 being the default bitrate.\n        channel (int, optional): Channel of the generated audio. Controls the channel of the generated speech. Values range [1, 2] with 1 being the default channel.\n        format (str, optional): Format of the generated audio. Controls the format of the generated speech. Values range [\"pcm\", \"mp3\",\"flac\"] with \"mp3\" being the default format.\n        language_boost (str, optional): Language boost of the generated audio. Controls the language boost of the generated speech. Values range ['Chinese', 'Chinese,Yue', 'English', 'Arabic', 'Russian', 'Spanish', 'French', 'Portuguese', 'German', 'Turkish', 'Dutch', 'Ukrainian', 'Vietnamese', 'Indonesian', 'Japanese', 'Italian', 'Korean', 'Thai', 'Polish', 'Romanian', 'Greek', 'Czech', 'Finnish', 'Hindi', 'auto'] with \"auto\" being the default language boost.\n        output_directory (str): The directory to save the audio to.\n\n    Returns:\n        Text content with the path to the output file and name of the voice used.\n    ",
    "kind": "basic",
    "name": "text_to_audio",
    "origin_name": "text_to_audio",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "List all voices available.\n\n    Args:\n        voice_type (str, optional): The type of voices to list. Values range [\"all\", \"system\", \"voice_cloning\"], with \"all\" being the default.\n    Returns:\n        Text content with the list of voices.\n    ",
    "kind": "basic",
    "name": "list_voices",
    "origin_name": "list_voices",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Clone a voice using provided audio files. The new voice will be charged upon first use.\n\n    COST WARNING: This tool makes an API call to Minimax which may incur costs. Only use when explicitly requested by the user.\n\n     Args:\n        voice_id (str): The id of the voice to use.\n        file (str): The path to the audio file to clone or a URL to the audio file.\n        text (str, optional): The text to use for the demo audio.\n        is_url (bool, optional): Whether the file is a URL. Defaults to False.\n        output_directory (str): The directory to save the demo audio to.\n    Returns:\n        Text content with the voice id of the cloned voice.\n    ",
    "kind": "basic",
    "name": "voice_clone",
    "origin_name": "voice_clone",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Play an audio file. Supports WAV and MP3 formats. Not supports video.\n\n     Args:\n        input_file_path (str): The path to the audio file to play.\n        is_url (bool, optional): Whether the audio file is a URL.\n    Returns:\n        Text content with the path to the audio file.\n    ",
    "kind": "basic",
    "name": "play_audio",
    "origin_name": "play_audio",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Generate a video from a prompt.\n\n    COST WARNING: This tool makes an API call to Minimax which may incur costs. Only use when explicitly requested by the user.\n\n     Args:\n        model (str, optional): The model to use. Values range [\"T2V-01\", \"T2V-01-Director\", \"I2V-01\", \"I2V-01-Director\", \"I2V-01-live\"]. \"Director\" supports inserting instructions for camera movement control. \"I2V\" for image to video. \"T2V\" for text to video.\n        prompt (str): The prompt to generate the video from. When use Director model, the prompt supports 15 Camera Movement Instructions (Enumerated Values)\n            -Truck: [Truck left], [Truck right]\n            -Pan: [Pan left], [Pan right]\n            -Push: [Push in], [Pull out]\n            -Pedestal: [Pedestal up], [Pedestal down]\n            -Tilt: [Tilt up], [Tilt down]\n            -Zoom: [Zoom in], [Zoom out]\n            -Shake: [Shake]\n            -Follow: [Tracking shot]\n            -Static: [Static shot]\n        first_frame_image (str): The first frame image. The model must be \"I2V\" Series.\n        output_directory (str): The directory to save the video to.\n        async_mode (bool, optional): Whether to use async mode. Defaults to False. If True, the video generation task will be submitted asynchronously and the response will return a task_id. Should use `query_video_generation` tool to check the status of the task and get the result.\n    Returns:\n        Text content with the path to the output video file.\n    ",
    "kind": "basic",
    "name": "generate_video",
    "origin_name": "generate_video",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Query the status of a video generation task.\n\n    Args:\n        task_id (str): The task ID to query. Should be the task_id returned by `generate_video` tool if `async_mode` is True.\n        output_directory (str): The directory to save the video to.\n    Returns:\n        Text content with the status of the task.\n    ",
    "kind": "basic",
    "name": "query_video_generation",
    "origin_name": "query_video_generation",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Generate a image from a prompt.\n\n    COST WARNING: This tool makes an API call to Minimax which may incur costs. Only use when explicitly requested by the user.\n\n     Args:\n        model (str, optional): The model to use. Values range [\"image-01\"], with \"image-01\" being the default.\n        prompt (str): The prompt to generate the image from.\n        aspect_ratio (str, optional): The aspect ratio of the image. Values range [\"1:1\", \"16:9\",\"4:3\", \"3:2\", \"2:3\", \"3:4\", \"9:16\", \"21:9\"], with \"1:1\" being the default.\n        n (int, optional): The number of images to generate. Values range [1, 9], with 1 being the default.\n        prompt_optimizer (bool, optional): Whether to optimize the prompt. Values range [True, False], with True being the default.\n        output_directory (str): The directory to save the image to.\n    Returns:\n        Text content with the path to the output image file.\n    ",
    "kind": "basic",
    "name": "text_to_image",
    "origin_name": "text_to_image",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Create or update a single file in a GitHub repository",
    "kind": "basic",
    "name": "create_or_update_file",
    "origin_name": "create_or_update_file",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Search for GitHub repositories",
    "kind": "basic",
    "name": "search_repositories",
    "origin_name": "search_repositories",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Create a new GitHub repository in your account",
    "kind": "basic",
    "name": "create_repository",
    "origin_name": "create_repository",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Get the contents of a file or directory from a GitHub repository",
    "kind": "basic",
    "name": "get_file_contents",
    "origin_name": "get_file_contents",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Push multiple files to a GitHub repository in a single commit",
    "kind": "basic",
    "name": "push_files",
    "origin_name": "push_files",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Create a new issue in a GitHub repository",
    "kind": "basic",
    "name": "create_issue",
    "origin_name": "create_issue",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Create a new pull request in a GitHub repository",
    "kind": "basic",
    "name": "create_pull_request",
    "origin_name": "create_pull_request",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Fork a GitHub repository to your account or specified organization",
    "kind": "basic",
    "name": "fork_repository",
    "origin_name": "fork_repository",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Create a new branch in a GitHub repository",
    "kind": "basic",
    "name": "create_branch",
    "origin_name": "create_branch",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Get list of commits of a branch in a GitHub repository",
    "kind": "basic",
    "name": "list_commits",
    "origin_name": "list_commits",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "List issues in a GitHub repository with filtering options",
    "kind": "basic",
    "name": "list_issues",
    "origin_name": "list_issues",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Update an existing issue in a GitHub repository",
    "kind": "basic",
    "name": "update_issue",
    "origin_name": "update_issue",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Add a comment to an existing issue",
    "kind": "basic",
    "name": "add_issue_comment",
    "origin_name": "add_issue_comment",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Search for code across GitHub repositories",
    "kind": "basic",
    "name": "search_code",
    "origin_name": "search_code",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Search for issues and pull requests across GitHub repositories",
    "kind": "basic",
    "name": "search_issues",
    "origin_name": "search_issues",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Search for users on GitHub",
    "kind": "basic",
    "name": "search_users",
    "origin_name": "search_users",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Get details of a specific issue in a GitHub repository.",
    "kind": "basic",
    "name": "get_issue",
    "origin_name": "get_issue",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Get details of a specific pull request",
    "kind": "basic",
    "name": "get_pull_request",
    "origin_name": "get_pull_request",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "List and filter repository pull requests",
    "kind": "basic",
    "name": "list_pull_requests",
    "origin_name": "list_pull_requests",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Create a review on a pull request",
    "kind": "basic",
    "name": "create_pull_request_review",
    "origin_name": "create_pull_request_review",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Merge a pull request",
    "kind": "basic",
    "name": "merge_pull_request",
    "origin_name": "merge_pull_request",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Get the list of files changed in a pull request",
    "kind": "basic",
    "name": "get_pull_request_files",
    "origin_name": "get_pull_request_files",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Get the combined status of all status checks for a pull request",
    "kind": "basic",
    "name": "get_pull_request_status",
    "origin_name": "get_pull_request_status",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Update a pull request branch with the latest changes from the base branch",
    "kind": "basic",
    "name": "update_pull_request_branch",
    "origin_name": "update_pull_request_branch",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Get the review comments on a pull request",
    "kind": "basic",
    "name": "get_pull_request_comments",
    "origin_name": "get_pull_request_comments",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  },
  {
    "desc": "Get the reviews on a pull request",
    "kind": "basic",
    "name": "get_pull_request_reviews",
    "origin_name": "get_pull_request_reviews",
    "params": [
      {
        "name": "input_params",
        "type": "Dict"
      }
    ]
  }
]